// Generated by CoffeeScript 1.3.1
(function() {

  exports.run = function(source) {
    var buf, ch, i, jmp, len, m, p, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _results;
    if (typeof source !== 'string') {
      throw new Error('invalid source');
    }
    if ((m = /[^+-.<>[\]]/.exec(source)) != null) {
      throw new Error("invalid char '" + m[0] + "'");
    }
    _ref = [0, [], []], i = _ref[0], buf = _ref[1], jmp = _ref[2];
    for (p = _i = 0, _len = source.length; _i < _len; p = ++_i) {
      ch = source[p];
      if (ch === '[' || ch === ']') {
        switch (ch) {
          case '[':
            buf[i++] = p;
            break;
          case ']':
            if (buf[i - 1] != null) {
              jmp[buf[--i]] = p;
              jmp[p] = buf[i];
              delete buf[i];
            } else {
              throw new Error("unexpect ']' at pos " + p);
            }
        }
      }
    }
    if (i !== 0) {
      throw new Error("expect ']' to match '[' at pos " + buf[i - 1]);
    }
    _ref1 = [-1, source.length], p = _ref1[0], len = _ref1[1];
    _results = [];
    while (++p < len) {
      ch = source[p];
      switch (ch) {
        case '+':
          _results.push(buf[i] = ((_ref2 = buf[i]) != null ? _ref2 : 0) + 1);
          break;
        case '-':
          _results.push(buf[i] = ((_ref3 = buf[i]) != null ? _ref3 : 0) - 1);
          break;
        case '>':
          _results.push(++i);
          break;
        case '<':
          _results.push(--i);
          break;
        case '.':
          _results.push(process.stdout.write(String.fromCharCode((_ref4 = buf[i]) != null ? _ref4 : 0x30)));
          break;
        case '[':
          if (!(buf[i] != null) || buf[i] === 0) {
            _results.push(p = jmp[p]);
          } else {
            _results.push(void 0);
          }
          break;
        case ']':
          if ((buf[i] != null) && buf[i] !== 0) {
            _results.push(p = jmp[p]);
          } else {
            _results.push(void 0);
          }
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  exports.run("++++++++++[>++++++++++<-]>++++.+.");

}).call(this);
